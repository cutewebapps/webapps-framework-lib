#!/usr/bin/php
<?php
/**
 * Current priority:
 * @TODO: remote package installation, cwa-install http://xxx.git
 * @TODO: check dependencies (with autoinstallation?
 * 
 * User can set following variables to make environment more flexible
 * For developer machine:
 * export CWA_ENV              = local
 * export CWA_FRONTEND*        = apache ( if frontend var would not be defined, no virtual hosts config would be generated )
 * export CWA_FRONTEND_RELOAD* = "sudo /etc/init.d/apache2 reload" (if not set up, no apache restart would be done)
 *                              for windows, you can use "net stop Apache2.2 && net start Apache2.2"
 * export CWA_MYSQL*           = "/usr/bin/mysql -u root" (if not set up, no database creations will be done)
 * 
 * export CWA_HOME         =/home/user or /home/user/webapps  sometimes
 * 
 * Following can be overrided:
 * export CWA_BIN_ROOT     =$(CWA_HOME)/bin
 * export CWA_CLASS_ROOT   =$(CWA_HOME)/classes
 * export CWA_CONF_ROOT    =$(CWA_HOME)/etc
 * export CWA_DATA_ROOT    =$(CWA_HOME)/data
 * export CWA_STATIC_ROOT  =$(CWA_HOME)/static
 * export CWA_VHOST_ROOT   =$(CWA_HOME)/htdocs 
 * export CWA_LIB_ROOT     =$(CWA_HOME)/lib
 * export CWA_LOG_ROOT     =$(CWA_HOME)/log
 * export CWA_PKG_ROOT     =$(CWA_HOME)/log/packages
 * export CWA_TEMP_ROOT    =$(CWA_HOME)/temp
 * 
 * export CWA_SRC_ROOT    =$(CWA_HOME)/src - also should be setup
 */
class Cwa_Env 
{
    /**
     * @return string
     */
    public function getSystemUser() 
    {
        return trim( shell_exec( 'whoami') );
    }
    /**
     * @return string
     */
    public function getSystemUserGroup() 
    {
        return trim( shell_exec( 'whoami') );
    }
    
    public function getName()
    {
         if ( getenv( 'CWA_ENV' ) ) return getenv( 'CWA_ENV'); 
         return 'local';
    }
    /**
     * Get root path for CWA installation
     * @return string
     */
    public function getHome() 
    { 
        if ( getenv( 'CWA_HOME' ) ) 
            return str_replace( "\\", "/", trim( getenv( 'CWA_HOME' )) );     
        if ( strtolower( substr( PHP_OS,0,3 )) == "wn")
            die( 'Please setup CWA_HOME environment variable' );
        
        return '/home/'.$this->getSystemUser();
    }
    /**
     * @return string
     */
    public function getClassRoot() 
    { 
        if ( getenv( 'CWA_CLASS_ROOT' ) ) return getenv( 'CWA_CLASS_ROOT'); 
        return $this->getHome().'/classes';
    }
    /**
     * @return string
     */
    public function getStaticRoot() 
    { 
        if ( getenv( 'CWA_STATIC_ROOT' ) ) return getenv( 'CWA_STATIC_ROOT'); 
        return $this->getHome().'/static';
    }
    /**
     * @return string
     */
    public function getPackageRoot() 
    { 
        if ( getenv( 'CWA_PKG_ROOT' ) ) return getenv( 'CWA_PKG_ROOT'); 
        return $this->getHome().'/log/package';
    }
    /**
     * @return string
     */
    public function getConfRoot() 
    { 
        if ( getenv( 'CWA_CONF_ROOT' ) ) return getenv( 'CWA_CONF_ROOT'); 
        return $this->getHome().'/etc';
    }    
    /**
     * @return string
     */
    public function getBinRoot() 
    { 
        if ( getenv( 'CWA_BIN_ROOT' ) ) return getenv( 'CWA_BIN_ROOT'); 
        return $this->getHome().'/bin';
    }        
    /**
     * @return string
     */
    public function getDataRoot() 
    { 
        if ( getenv( 'CWA_DATA_ROOT' ) ) return getenv( 'CWA_DATA_ROOT'); 
        return $this->getHome().'/data';
    }    
    /**
     * @return string
     */
    public function getLibRoot() 
    { 
        if ( getenv( 'CWA_LIB_ROOT' ) ) return getenv( 'CWA_LIB_ROOT'); 
        return $this->getHome().'/lib';
    }        
    /**
     * @return string
     */
    public function getLogRoot() 
    { 
        if ( getenv( 'CWA_LOG_ROOT' ) ) return getenv( 'CWA_LOG_ROOT'); 
        return $this->getHome().'/log';
    }          
    /**
     * @return string
     */
    public function getVirtualHostsRoot() 
    { 
        if ( getenv( 'CWA_VHOST_ROOT' ) ) return getenv( 'CWA_VHOST_ROOT'); 
        return $this->getHome().'/htdocs';
    }
    /**
     * @return boolean
     */
    public function hasFramework()
    {
        return file_exists( $this->getClassRoot().'/Sys/model/Loader.php' );
    }
    /**
     * launch framework autoloader
     * @return void
     */
    public function init()
    {
        define( 'CWA_DIR_CLASSES', $this->getClassRoot() );
        require_once $this->getClassRoot().'/Sys/model/Loader.php';
    }
}

class Cwa_Package
{
    public $env = null;
    public $dir = '';
    protected $config = null;
    /**
     * @return Sys_Config
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * @return string
     */
    public function getDir()
    {
        return $this->dir;
    }
    
    public function __construct()
    {
        $this->dir = getcwd();
        
        $this->env = new Cwa_Env();
        if ( !$this->env->hasFramework() ) die( "CWA ERROR: no framework installed ({$this->env->getClassRoot()})\n" );    
        if ( !file_exists( "control.json" ))  die( "CWA ERROR: control.json was not found\n" );
        $this->env->init(); 
                
        $arrControl = json_decode( file_get_contents( 'control.json' ), true );
        if ( $arrControl == "" ) die( "CWA ERROR: control.json: invalid json\n" );
            
        $this->config = new Sys_Config( $arrControl );
        if ( !isset( $this->config->name ) ) die( "CWA error: invalid control file - name is missing\n");
        if ( !isset( $this->config->version ) ) die( "CWA error: invalid control file - version is missing\n");
        
    }
    /**
     * Get package name
     * @return string
     */
    public function getPackageName()
    {
        return $this->config->name;
    }
    /**
     * Get package version
     * @return string
     */
    public function getVersion()
    {
        return $this->config->version;
    }
    
    protected function symLink( $src, $strDir )
    {
        //echo 'link '.$src.' to '.$strDir."\n";
        $strCmd = str_replace("\\", "/", 'ln -s '.$src.' '.$strDir);
        echo 'LINK: ' . $strCmd."\n";
        if ( ! is_dir( $src ) || strtoupper(substr( PHP_OS,0,3 )) != "WIN" ) {
            Sys_Cmd::run( $strCmd );
        } 
    }
    
    /**
     * link classes, link static, link files inside HTDOCS except files in root
     */
    public function linkContent()
    {
        $arrSubFolders = array(
            'classes'   => array( "classes", $this->env->getClassRoot()),
            'lib'       => array( "lib", $this->env->getLibRoot()),
            'bin'       => array( "bin", $this->env->getBinRoot()),
            'data'      => array( "data", $this->env->getDataRoot()),
            'static'    => array( "htdocs/static", $this->env->getStaticRoot())
        );
        foreach ( $arrSubFolders as $strConfigName => $arrFolders ) {
            $strSrcFolder  = $this->getDir().'/'.$arrFolders[0];
            $strDestFolder = $arrFolders[1];
            if ( is_dir( $strSrcFolder ) && is_object( $this->getConfig()->$strConfigName ) ) {
                $dirDst = new Sys_Dir( $strDestFolder );
                if ( !$dirDst->exists() ) { $dirDst->create( '', true ); }
                
                $dirSrc = new Sys_Dir( $strSrcFolder );
                $arrDirs = $dirSrc->getDirs();
                // link folders
                foreach( $arrDirs as $strDir ) {
                    $strDest = $strDestFolder.'/'.basename( $strDir );
                    if ( !is_dir( $strDest )) {
                        $this->symLink( $strDest, $strDir );
                    }
                }
                // link files
                $arrFiles = $dirSrc->getFiles('', false );
                foreach( $arrFiles as $strFile ) {
                    $strDest = $strDestFolder.'/'.basename( $strFile );
                    if ( !file_exists( $strDest )) {
                        $this->symLink( $strDest, $strDir );
                    }
                }
            }
        }        
    }    
    
    protected function _prepareApacheVirtualHost( $objProps )
    {
        $strFrontend = 'apache';
        $strName = $objProps->name;
        $strFullHost = $strName .'.'. trim( shell_exec( 'hostname' ) );
        $strDashedHost = str_replace( '.', '_', $strName );
        print "Preparing $strFrontend Virtual Host ".$strFullHost."\n";

        $strSitesAvailableDir =  $this->env->getConfRoot().'/'.$strFrontend .'/sites-available';
        $strIp = '*';
        $nServerPort = 80;
        if ( getenv('CWA_FRONTEND_PORT') != '' ) $nServerPort = getenv('CWA_FRONTEND_PORT');

            $strAvailableFile  = $strSitesAvailableDir.'/'.$strDashedHost.'.conf';
            
            $npmitk = "";
            if ( $this->env->getSystemUser() != "" &&
                 strpos( $this->env->getSystemUser(), "\\"  ) === false ) {
                
                $npmitk = "<IfModule mpm_itk_module>"."\n"
                    . "\tAssignUserId {$this->env->getSystemUser()} ".$this->env->getSystemUserGroup()."\n"
                    . "</IfModule>";
            }
            
            $strVhostConfig =<<< EOF
<VirtualHost $strIp:$nServerPort>
	DocumentRoot {$this->env->getVirtualHostsRoot()}/$strName
	ServerName $strFullHost
	ErrorLog  "{$this->env->getLogRoot()}/apache_error_{$strDashedHost}.log"
	CustomLog  "{$this->env->getLogRoot()}/apache_access_{$strDashedHost}.log" common
            
        SetEnv CWA_HOME {$this->env->getHome()}
        SetEnv CWA_CLASS_ROOT {$this->env->getClassRoot()}
        $npmitk
	<Directory {$this->env->getVirtualHostsRoot()}/$strName>
		AllowOverride All
		Order allow,deny
		Allow from all
	</Directory>
</VirtualHost>
EOF;
            $file = new Sys_File ( $strAvailableFile );
            $file->save( $strVhostConfig );
    }
    
    protected function _prepareNginxVirtualHost( $objProps )
    {
        $strFrontend = 'nginx';
        $strName = $objProps->name;
        ///$strFullHost = $strName .'.'. trim( shell_exec( 'hostname' ) );
        //$strDashedHost = str_replace( '.', '_', $strName );
        print "Preparing $strFrontend Virtual Host ".$strName."\n";

        // TODO: link correct  /etc/nginx and /etc/php-fpm config from ~/src/<project>/conf/
        $fDirNginx = new Sys_Dir( $this->env->getDir().'/'.$this->getPackageName().'/conf/nginx/'.$this->env->getName() );
        if ( $fDirNginx->exists() ) {
            // foreach nginx configuration fire for this environment, link it to nginx config
            echo 'NGINX CONFIG FOLDER: '.$fDirNginx->getName()."\n";
        } else {
            echo 'NGINX CONFIG FOLDER NOT FOUND: '.$fDirNginx->getName()."\n";
        }
        $fDirPhpFpm = new Sys_Dir( $this->env->getDir().'/'.$this->getPackageName().'/conf/php-fpm/'.$this->env->getName() );
        if ( $fDirPhpFpm->exists() ) {
            // foreach nginx configuration fire for this environment, link it to nginx config
            echo 'PHP-FPM CONFIG FOLDER: '.$fDirNginx->getName()."\n";
        } else {
            echo 'PHP-FPM CONFIG FOLDER NOT FOUND: '.$fDirNginx->getName()."\n";
        }
    }
    
    /**
     * TODO: create virtual host for nginx
     * //- update version.txt file
     * 
     * @return type
     */
    
    public function createVirtualHosts()
    {
        // vhost
        $config = $this->getConfig();
        $strFrontend = getenv( 'CWA_FRONTEND' );
        if ( $strFrontend == '' ) {
            echo  "no frontend for virtual hosts (export CWA_FRONTEND=apache)"; return;
        }
        if ( $strFrontend != 'apache' ) {
            // echo  "unknown frontend for virtual hosts (export CWA_FRONTEND=apache)"; return;
            $strFrontend = 'nginx';
        }       
        
        $arrDirs = array(
            $this->env->getVirtualHostsRoot(),
            $this->env->getConfRoot(),
            $this->env->getConfRoot().'/'.$strFrontend,
        );
        
        if ( $strFrontend == 'apache' ) {
            $arrDirs []= $this->env->getConfRoot().'/'.$strFrontend.'/conf.d';
            $arrDirs []= $this->env->getConfRoot().'/'.$strFrontend.'/sites-available';
        } else {
            $arrDirs []= $this->env->getConfRoot().'/php-fpm';
        }

        foreach( $arrDirs as $strMandatoryDir ) {
            $dir = new Sys_Dir( $strMandatoryDir );
            if ( !$dir->exists() ) { 
                Sys_Io::out( $dir->getName() );
                $dir->create();
            }
        }
        
        // creating apache aliases for static libraries
        if ( $strFrontend == 'apache' && is_object( $config->static ) ) {
             $strAliasDir =  $this->env->getConfRoot().'/'.$strFrontend .'/conf.d';
             foreach( $config->static as $strStaticDir ) {
                 Sys_Io::out( 'creating alias /'.$strStaticDir.'/');
                 
                 $file = new Sys_File ( $strAliasDir.'/'.$strStaticDir.'.conf' );
                 $file->save( "Alias /static/$strStaticDir/ " . $this->env->getStaticRoot() . "/$strStaticDir/ \n" );
             }
        }
        
        if ( empty( $config->vhosts ) ) return;
        
        $arrHosts = $config->vhosts;
        if ( !is_object( $config->vhosts ) ) $arrHosts = array( $config->vhosts );

        foreach( $arrHosts as $objProps ) {
            $strName = $objProps->name;
            
            if ( $strFrontend == 'apache' ) {
                $this->_prepareApacheVirtualHost( $objProps );
            } else {
                $this->_prepareNginxVirtualHost( $objProps );
            }
            
            $strDestDir = $this->env->getVirtualHostsRoot()."/".$strName;
            // link all directories in $strSrcDir to destination
            $dirDest = new Sys_Dir( $strDestDir );
            if ( !$dirDest->exists() ) {
                echo 'creating directory '.$dirDest->getName()."\n";
                $dirDest->create();
            }

            $arrFiles2Copy = array();
            if ( $objProps->copy ) $arrFiles2Copy = $objProps->copy->toArray();
            
            $dir = new Sys_Dir( $this->getDir().'/htdocs' );
            foreach( $dir->getDirs() as $strDirName ) {
                if ( !file_exists( $strDestDir .'/'.basename($strDirName) ) ) {
                    $strCmd = 'ln -s '.$strDirName.' '.$strDestDir.'/';
                    echo $strCmd."\n";
                    // $this->symLink( $strDirName, $strDestDir .'/'.basename($strDirName) );
                    Sys_Cmd::run( $strCmd );
                }
            }
            foreach ( $dir->getFiles( '', false ) as $strFileName ) {
                // copy all files
                if ( !file_exists( $strDestDir .'/'.basename($strFileName) ) ) {
                    
                    if ( in_array( basename($strFileName), $arrFiles2Copy ) ) {
                        echo 'Copying '.$strFileName."\n";
                        copy( $strFileName, $strDestDir.'/'.basename($strFileName) );
                    } else {
                        $strCmd = 'ln -s '.$strFileName.' '.$strDestDir.'/';
                        echo $strCmd."\n";
                        Sys_Cmd::run( $strCmd );
                        // $this->symLink( $strFileName, $strDestDir.'/'.basename($strFileName) );
                    }
                }
            }

            if ( $objProps->writable )  {
                // creating writable folders
                $arrWritableFolders = $objProps->writable;
                foreach ( $arrWritableFolders as $strFolder ) {
                    $strDestFolder = $strDestDir.'/'.$strFolder;
                    if ( !is_dir( $strDestFolder ) ) {
                        echo 'dir 0777 '.$strDestFolder."\n";
                        mkdir( $strDestFolder ); chmod( $strDestFolder, 0777 );
                    }
                }
            }
            
            // TODO: update version.txt file
            $strCmdVersion = 'svn info '.$this->getPackageName().' | grep Revision | sed s/Revision:\ // > ~/htdocs/'.$strDestDir.'/cdn/version.txt';
            Sys_Io::out( $strCmdVersion );
        }
        
        if ( getenv('CWA_FRONTEND_RELOAD') != ''  ) {
            // reloading apache if we have it configured
            Sys_Cmd::run( getenv('CWA_FRONTEND_RELOAD') );
        }
    }

    public function createDatabase()
    {
        if ( is_object( $this->config->database ) ) {
            $strDbName = $this->config->database->name;
            if ( getenv('CWA_MYSQL') != ''  ) {
                $strMysqlBin = getenv('CWA_MYSQL');
                $strDbCharset = $this->config->database->charset;
                $strDbSource = $this->config->database->source;

                // TODO: check that database was not created yet
                // creating database 
                $strSql = 'CREATE DATABASE IF NOT EXISTS '.$strDbName;
                if ( $strDbCharset ) $strSql.' DEFAULT CHARACTER SET '.$strDbCharset;
                $strCmd = 'echo '.$strSql.' | '. $strMysqlBin;
                echo $strCmd."\n";
                Sys_Cmd::run( $strCmd );
                
                if ( $strDbSource )  {
                    // TODO: download database from remote dump and run it
                }
               
            } else {
                echo  "Notice: no mysql env.setup, recommended for dev machine (export CWA_MYSQL=\"/usr/bin/mysql -u root\")\n"; 
            }
        }
    }
    
    public function updateCrontab()
    {
        $fCrontab = $this->env->getPackageRoot().'/'.$this->getPackageName().'/conf/cron.d/'.$this->env->getName();
        if ( $fCrontab->exists() ) {
            Sys_Io::out( "updating cron from ".$fCrontab->getName() );    
            $strCmd = 'crontab '.$fCrontab->getName();
            Sys_Cmd::run( $strCmd );
        }
    }
    
    public function checkDependencies()
    {
        
    }
    /**
     * @return void
     */
    public function save()
    {
        $strFile = new Sys_File( $this->env->getPackageRoot().'/'.$this->getPackageName() );
        $strFile->write( $this->getVersion(), true );
        echo "\ninstalled: ".$this->getPackageName().', version: '.$this->getVersion()."\n\n";
    }
}

$pkg = new Cwa_Package();

// checking package dependencies
$pkg->checkDependencies();
// link classes and static
$pkg->linkContent();
// prepare files for virtual host and apache configuration
$pkg->createVirtualHosts();
// install typical database
$pkg->createDatabase();
$pkg->updateCrontab();
// save version information
$pkg->save();




